#!/usr/bin/env python3

import re
import os
import sys
from subprocess import (
  check_call, check_output, DEVNULL,
  TimeoutExpired, CalledProcessError,
)

filelines = (
  re.compile(
    r'''([File\s]*['"])?
    (?P<file>[^'"]+)
    ['"],\sline\s
    (?P<line>\d+)''', re.VERBOSE), # Python Traceback, e.g. File "/path/to/file.py", line 23
  re.compile(
    r'''(?P<file>.*?)
    (?:
      :(?P<line>\d+)
      (?:
        :(?P<col>\d+)
      )?
    )?:?$''', re.VERBOSE), # filename:line:col
)

TIMEOUT = 1

def parseLineno(f):
  for r in filelines:
    m = r.match(f)
    if m:
      d = m.groupdict()
      if '://' not in d['file']:
        file = os.path.abspath(d['file'])
      line = d.get('line', None)
      col = d.get('col', None)
      break
    file = f
  else:
    line = col = None

  if col is not None:
    cmd = '+call setpos(".", [0, %s, %s, 0])' % (line, col)
  elif line is not None:
    cmd = '+%s' % line
  else:
    return (file,)

  return cmd, file

def choicebox(msg, title, headers, choices):
  cmd = ['zenity', '--list', '--title', title, '--text', msg]
  for h in headers:
    cmd += ['--column', h]
  for c in choices:
    cmd += c
  try:
    out = check_output(
      cmd, stderr = DEVNULL,
      # zenity has an annoying warning
      # Gtk-Message: GtkDialog mapped without a transient parent. This is discouraged.
    ).split(b'\n')[0].decode()
    return out
  except CalledProcessError:
    return None

def main(files, wait_for_vim):
  if len(files) == 1:
    try:
      files = parseLineno(files[0])
    except ValueError:
      pass

  vims = [x for x in
          check_output(['vim', '--serverlist'],
                       universal_newlines=True).split('\n')
          if x]

  if len(vims) > 1:
    vims_info = []
    for x in vims:
      try:
        out = check_output(
          ['vim', '--servername', x, '--remote-expr', 'expand("%")'],
          universal_newlines=True,
          timeout=TIMEOUT)
      except TimeoutExpired:
        continue
      vims_info.append((x, out.strip()))

    if len(vims_info) == 1:
      vim = vims_info[0][0]
    else:
      vim = choicebox(
        msg='Multiple Vim instances found. Please choose one:',
        title='Choose a Vim instance', headers=['Name', 'Current File'],
        choices=vims_info)
      if vim is None:
        print('Cancelled.')
        sys.exit(1)

  elif len(vims) == 1 and vims[0]:
    vim = vims[0]

  else:
    # fallback to gvim
    cmd = ['gvim']
    cmd.extend(files)
    check_call(cmd)
    sys.exit()

  cmd = ['vim', '--servername', vim]
  if wait_for_vim:
    cmd.append('--remote-tab-wait-silent')
  else:
    cmd.append('--remote-tab-silent')
  cmd.extend(files)
  if wait_for_vim:
    check_call(cmd)
  else:
    check_call(cmd, timeout=TIMEOUT)

if __name__ == '__main__':
  import argparse
  parser = argparse.ArgumentParser(description='open with existing Vim')
  parser.add_argument('files', metavar='FILE', nargs='*',
                     help='files to open')
  parser.add_argument('--wait', action='store_true', default=False,
                     help='wait for Vim to finish editing the file')
  args = parser.parse_args()

  main(args.files, args.wait)
