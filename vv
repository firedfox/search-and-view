#!/usr/bin/env python3

import re
import os
import sys, easygui
# TimeoutExpired is added in Python 3, oh yeah~
from subprocess import check_call, check_output, TimeoutExpired

filelines = (
  re.compile(
    r'''([File\s]*")?
    (?P<file>[^"]+)
    ",\sline\s
    (?P<line>\d+)''', re.VERBOSE), # Python Traceback, e.g. File "/path/to/file.py", line 23
  re.compile(
    r'''(?P<file>.*?)
    (?:
      :(?P<line>\d+)
      (?:
        :(?P<col>\d+)
      )?
    )?:?$''', re.VERBOSE), # filename:line:col
)

TIMEOUT = 1

def parseLineno(f):
  for r in filelines:
    m = r.match(f)
    if m:
      d = m.groupdict()
      if '://' not in file:
        file = os.path.abspath(d['file'])
      line = d.get('line', None)
      col = d.get('col', None)
      break
    file = f
  else:
    line = col = None

  if col is not None:
    cmd = '+call setpos(".", [0, %s, %s, 0])' % (line, col)
  elif line is not None:
    cmd = '+%s' % line
  else:
    return (file,)

  return cmd, file

def main(files):
  if len(files) == 1:
    try:
      files = parseLineno(files[0])
    except ValueError:
      pass

  vims = [x for x in
          check_output(['vim', '--serverlist'],
                       universal_newlines=True).split('\n')
          if x]

  if len(vims) > 1:
    # '\t' won't display correctly
    vims_ = []
    for x in vims:
      try:
        out = check_output(
          ['vim', '--servername', x, '--remote-expr', 'expand("%")'],
          universal_newlines=True,
          timeout=TIMEOUT)
      except TimeoutExpired:
        continue
      vims_.append(x + ' '*(10-len(x)) + out)
    vims = vims_
    if len(vims) == 1:
      vim = vims[0].split(' ', 1)[0]
    else:
      try:
        vim = easygui.choicebox(
          msg='Multiple Vim instances found. Please choose one:',
          title='Choose a Vim instance', choices=vims).split(' ', 1)[0]
      except AttributeError:
        print('Cancelled.')
        sys.exit(1)

  elif len(vims) == 1 and vims[0]:
    vim = vims[0]
  else:
    # fallback to gvim
    cmd = ['gvim']
    cmd.extend(files)
    check_call(cmd)
    sys.exit()

  cmd = ['vim', '--servername', vim, '--remote-tab-silent']
  cmd.extend(files)
  check_call(cmd, timeout=TIMEOUT)

if __name__ == '__main__':
  main(sys.argv[1:])
